@model ADProject.Models.Recipe

@{
    ViewData["Title"] = "Edit";
    int userId = (int)ViewData["UserId"];
    string recipe = (string)ViewData["Recipe"];
}

<div id="edit"></div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<input type="hidden" id="RequestVerificationToken"
       name="RequestVerificationToken" value="@GetAntiXsrfRequestToken()">

<!-- React JS -->
<script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

<!-- axios -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js" integrity="sha512-bZS47S7sPOxkjU/4Bt0zrhEtWx0y0CRkhEp8IckzK+ltifIIE9EMIMTuT/mEzoIMewUINruDBIR/jJnbguonqQ==" crossorigin="anonymous"></script>

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
    .create-form-header {
        text-align: center;
    }

    hr {
        border-color: black;
    }

    textarea {
        min-height: 200px;
        resize: none;
    }

    .icon-button {
        background-color: Transparent;
        background-repeat:no-repeat;
        border: none;
        cursor:pointer;
        overflow: hidden;
        outline:none;
    }
    .files input {
        outline: 2px dashed #92b0b3;
        outline-offset: -10px;
        -webkit-transition: outline-offset .15s ease-in-out, background-color .15s linear;
        transition: outline-offset .15s ease-in-out, background-color .15s linear;
        padding: 120px 0px 85px 35%;
        text-align: center !important;
        margin: 0;
        width: 100% !important;
    }
    .files input:focus{     
        outline: 2px dashed #92b0b3;  
        outline-offset: -10px;
        -webkit-transition: outline-offset .15s ease-in-out, background-color .15s linear;
        transition: outline-offset .15s ease-in-out, background-color .15s linear; border:1px solid #92b0b3;
    }
    .files{ 
        position:relative
    }
    .files:after {  pointer-events: none;
        position: absolute;
        top: 50px;
        left: 0;
        width: 50px;
        right: 0;
        height: 56px;
        content: "";
        background-image: url(https://image.flaticon.com/icons/png/128/109/109612.png);
        display: block;
        margin: 0 auto;
        background-size: 100%;
        background-repeat: no-repeat;
    }
    .color input{ 
        background-color:#f1f1f1;
    }
    .files:before {
        position: absolute;
        bottom: 50px;
        left: 0;  pointer-events: none;
        width: 100%;
        right: 0;
        height: 57px;
        content: " or drag it here. ";
        display: block;
        margin: 0 auto;
        color: #2ea591;
        font-weight: 600;
        text-transform: capitalize;
        text-align: center;
    }
    .main-image {
        width: 350px;
        height: 300px;
        overflow: hidden;
    }
</style>

<script type="text/babel">
    class Edit extends React.Component {
        render() {
            return (
                <div className="px-2">
                    <h2 className="create-form-header">Edit Recipes</h2>
                    <hr />
                    <div className="row justify-content-center">
                        <form enctype="multipart/form-data" onSubmit={this.submitHandler}>

                            <div className="row">
                                <div className="col-sm">
                                    <div className="form-group">
                                        <label className="control-label font-weight-bold">Recipe Name</label>
                                        <input type="text" className="form-control" name="Title" value={this.state.Title} onChange={this.handleChange} />
                                    </div>
                                    <div className="form-group">
                                        <label className="control-label font-weight-bold">Cover Image</label>
                                        {this.state.MainMediaUrl ? (
                                            <div className="row">
                                                <div className="col-sm">
                                                    <div className="row">
                                                        <div className="col-sm">
                                                            <img src={`@Url.Content("~/${this.state.MainMediaUrl}")`} className="img-fluid main-image mb-2" alt="MainMediaUrl" />
                                                        </div>
                                                    </div>
                                                    <div className="row">
                                                        <div className="col-sm">
                                                            <input type="file" onChange={this.onMainMediaUrlChange} />
                                                        </div>
                                                    </div>
                                                    <div className="row">
                                                        <div className="col-sm">
                                                            <button className="btn btn-secondary mt-4" value="upload" onClick={this.onMainMediaUpload}>
                                                                Change
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        ) : (
                                            <div className="files">
                                                <input type="file" className="form-control" onChange={this.onMainMediaUrlChange} />
                                                <button className="btn btn-secondary mt-4" value="upload" onClick={this.onMainMediaUpload}>
                                                    Upload
                                                </button>
                                            </div>
                                        )}
                                    </div>
                                    <div className="form-group">
                                        <label className="control-label font-weight-bold">Description</label>
                                        <textarea type="text" className="form-control" name="Description" value={this.state.Description} onChange={this.handleChange}></textarea>
                                    </div>
                                </div>
                                <div className="col-sm">
                                    <div className="form-group">
                                        <label className="control-label font-weight-bold">Duration (Minutes)</label>
                                        <input type="number" className="form-control" name="DurationInMins" value={this.state.DurationInMins} onChange={this.handleChange} />
                                    </div>
                                    <div className="form-group">
                                        <label className="control-label font-weight-bold">Calories</label>
                                        <input type="number" className="form-control" name="Calories" value={this.state.Calories} onChange={this.handleChange} />
                                    </div>
                                    <div className="form-group">
                                        <label className="control-label font-weight-bold">Serving Size</label>
                                        <input type="number" className="form-control" name="ServingSize" value={this.state.ServingSize} onChange={this.handleChange} />
                                    </div>
                                    <div className="row">
                                        <div className="col-sm">
                                            <div className="row justify-content-between">
                                                <div className="col-sm">
                                                    <label className="control-label font-weight-bold">Allergen Tags</label>
                                                </div>
                                            </div>
                                            <div className="row justify-content-between">
                                                <div className="col-sm">
                                                    {this.state.RecipeTags.map((tag, index) => {
                                                        if(tag.IsAllergenTag) {
                                                            return (
                                                                <div className="row mb-1" key={index}>
                                                                    <div className="col-sm-10">
                                                                        <input type="text" className="form-control" onChange={() => this.handleAllergenTagChange(event, index)} value={tag.Tag.Warning} />
                                                                    </div>
                                                                    <div className="col-sm-2">
                                                                        <button type="button" className="icon-button" onClick={() => this.removeAllergenTag(index)}>
                                                                            <i class="fa fa-times" aria-hidden="true"></i>
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            )
                                                        }
                                                    })}
                                                </div>
                                            </div>
                                            <div className="row mb-2">
                                                <div className="col-sm-6">
                                                    <button type="button" className="icon-button" onClick={this.addAllergenTag}>
                                                        <i class="fa fa-plus" aria-hidden="true">Add Allergen Tag</i>
                                                    </button>
                                                </div>
                                                <div className="col-sm-6">
                                                    <button className="icon-button" type="button" onClick={this.generateAllergenTags}>
                                                        <i class="fa fa-plus-square" aria-hidden="true">Generate Allergen Tags</i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div className="row mb-5">
                                        <div className="col-sm">
                                            <label className="control-label font-weight-bold">Tags</label>
                                            {this.state.RecipeTags.map((tag, index) => {
                                                if(!tag.IsAllergenTag) {
                                                    return (
                                                        <div className="row mb-1" key={index}>
                                                            <div className="col-sm-10">
                                                                <input type="text" className="form-control" onChange={() => this.handleTagChange(event, index)} value={tag.Tag.TagName} />
                                                            </div>
                                                            <div className="col-sm-2">
                                                                <button type="button" className="icon-button" onClick={() => this.removeTag(index)}>
                                                                    <i class="fa fa-times" aria-hidden="true"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    )
                                                }
                                            })}
                                            <button type="button" className="icon-button" onClick={this.addTag}>
                                                <i class="fa fa-plus" aria-hidden="true">Add Tags</i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className="row">
                                <div className="col-sm">
                                    <label className="control-label font-weight-bold">Ingredients</label>
                                </div>
                            </div>

                            <div className="row">
                                <div className="col-sm">
                                    {this.state.RecipeIngredients.map((element, index) => {
                                        return(
                                            <div className="row" key={index}>
                                                <div className="form-group col-sm-6">
                                                    <input type="text" className="form-control" placeholder="Ingredient" id={`ingredient-name-${index}`} name="ingredient-name" onChange={() => this.handleIngredientChange(index)} value={element.Ingredient} />
                                                </div>
                                                <div className="form-group col-sm-2">
                                                    <input type="number" className="form-control" placeholder="Quantity" id={`ingredient-qty-${index}`} name="ingredient-qty" onChange={() => this.handleIngredientChange(index)} value={element.Quantity} />
                                                </div>
                                                <div className="form-group col-sm-3">
                                                    <input type="text" className="form-control" placeholder="Unit" id={`ingredient-unit-${index}`} name="ingredient-unit" onChange={() => this.handleIngredientChange(index)} value={element.UnitOfMeasurement} />
                                                </div>
                                                <div className="col-sm-1">
                                                    <button type="button" className="icon-button" onClick={() => this.removeIngredient(index)}>
                                                        <i class="fa fa-times" aria-hidden="true"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        )
                                    })}
                                </div>
                            </div>

                            <div className="row">
                                <div className="col-sm mb-5">
                                    <button className="icon-button" type="button" onClick={this.addIngredient}>
                                        <i class="fa fa-plus" aria-hidden="true">Add ingredient</i>    
                                    </button>
                                </div>
                            </div>

                            <div className="row">
                                <div className="col-sm">
                                    {this.state.RecipeSteps.map((element, index) => {
                                        return(
                                            <div key={index}>
                                                <div className="row">
                                                    <div className="col-sm font-weight-bold">
                                                        Step {index + 1}
                                                    </div>
                                                </div>
                                                <div className="row">
                                                    <div className="form-group col-sm-6">
                                                        {element.MediaFileUrl ? (
                                                            <div className="row">
                                                                <div className="col-sm">
                                                                    <div className="row">
                                                                        <div className="col-sm">
                                                                            <img src={`@Url.Content("~/${element.MediaFileUrl}")`} className="img-fluid main-image mb-2" alt="MainMediaUrl" />
                                                                        </div>
                                                                    </div>
                                                                    <div className="row">
                                                                        <div className="col-sm">
                                                                            <input type="file" onChange={() => this.onStepUrlChange(event, index)} />
                                                                        </div>
                                                                    </div>
                                                                    <div className="row">
                                                                        <div className="col-sm">
                                                                            <button className="btn btn-secondary mt-4" value="upload" onClick={() => this.onStepMediaUpload(event, index)}>
                                                                                Change
                                                                            </button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        ) : (
                                                            <div className="files">
                                                                <input type="file" className="form-control" onChange={() => this.onStepUrlChange(event, index)} />
                                                                <button className="btn btn-secondary mt-4" value="upload" onClick={() => this.onStepMediaUpload(event, index)}>
                                                                    Upload
                                                                </button>
                                                            </div>
                                                        )}
                                                    </div>
                                                    <div className="form-group col-sm-5">
                                                        <textarea type="text" placeholder="Step Instructions" className="form-control" name="step-instruction" onChange={() => this.handleStepChange(event, index)}  value={element.TextInstructions}></textarea>
                                                    </div>
                                                    <div className="col-sm-1">
                                                        <button type="button" className="icon-button" onClick={() => this.removeStep(index)}>
                                                            <i class="fa fa-times" aria-hidden="true"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        )
                                    })}
                                </div>
                            </div>

                            <div className="row ">
                                <div className="col-sm">
                                    <button className="icon-button" type="button" onClick={this.addStep}>
                                        <i class="fa fa-plus" aria-hidden="true">Add Step</i>
                                    </button>
                                </div>
                            </div>

                            <div className="row mt-3">
                                <div className="col-sm">
                                    <div className="form-group form-check">
                                        <label className="form-check-label font-weight-bold">
                                            <input type="checkbox" className="form-check-input" name="IsPublished" checked={this.state.IsPublished === true} onChange={this.handleChange} /> 
                                            {" "}Make Public
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div className="row">
                                <div className="col-sm">
                                    <label className="control-label font-weight-bold">Share in Groups</label>
                                </div>
                            </div>

                            <div className="row">
                                <div className="col-sm">
                                    {this.state.RecipeGroups.map((element, index) => {
                                        return(
                                            <div className="row" key={index}>
                                                <div className="form-group col-sm-6">
                                                    <input type="text" className="form-control" placeholder="Group" onChange={() => this.handleGroupChange(event, index)} value={element.Group.GroupName} />
                                                </div>
                                                <div className="col-sm-1">
                                                    <button type="button" className="icon-button" onClick={() => this.removeGroup(index)}>
                                                        <i class="fa fa-times" aria-hidden="true"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        )
                                    })}
                                </div>
                            </div>

                            <div className="row ">
                                <div className="col-sm">
                                    <button className="icon-button" type="button" onClick={this.addGroup}>
                                        <i class="fa fa-plus" aria-hidden="true">Add Group</i>
                                    </button>
                                </div>
                            </div>

                            <div className="row mt-3">  
                                <div className="col-sm-2 offset-sm-10">
                                    <input type="submit" value="Edit" className="btn btn-primary" />
                                </div>
                            </div>

                        </form>
                    </div>
                </div>
            )
        }

        constructor(props) {
            super(props);
            this.state = {
                Title: "",
                Description: "",
                UserId: "@Html.Raw(userId)",
                DurationInMins: 0,
                Calories: 0,
                ServingSize: 1,
                IsPublished: true,
                MainMediaUrl: "",
                MainSelectedFile: null,
                RecipeIngredients: [{
                    Ingredient: "",
                    Quantity: 0,
                    UnitOfMeasurement: "",
                }],
                RecipeSteps: [{
                    TextInstructions: "",
                    MediaFileUrl: "",
                    MediaSelectedFile: null,
                }],
                RecipeTags: [{
                    IsAllergenTag: true,
                    Tag: {
                        TagName: "",
                        Warning: "",
                    }
                }, {
                    IsAllergenTag: false,
                    Tag: {
                        TagName: "",
                        Warning: ""
                    }
                }],
                RecipeGroups: [{
                    Group: {
                        GroupName: ""
                    }
                }]
            };
        }

        onStepUrlChange = (event, index) => {
            console.log(event.target.files[0].name);
            this.setState(state => {
                const RecipeSteps = state.RecipeSteps;
                RecipeSteps[index].MediaSelectedFile = event.target.files[0];

                return {
                    RecipeSteps
                }
            })
        }

        onStepMediaUpload = async (event, index) => {
            event.preventDefault();
            const file = this.state.RecipeSteps[index].MediaSelectedFile;

            if(!file) {
                alert("Please choose a new image");
                return;
            }

            const formData = new FormData();
            formData.append("formFile", file);
            formData.append("fileName", file.name);

            try {
                const { data: { fileUrl } } = await axios.post("/Recipes/FileUpload", formData);
                console.log(fileUrl);

                this.setState(state => {
                    const RecipeSteps = state.RecipeSteps;
                    RecipeSteps[index].MediaFileUrl = fileUrl.trim();
                    console.log(RecipeSteps);
                    return {
                        RecipeSteps
                    }
                });
            } catch(error) {
                alert("Error uploading step image");
            }
        }

        onMainMediaUpload = async (event) => {
            event.preventDefault();
            const file = this.state.MainSelectedFile;
            
            if(!file) {
                alert("Please choose a new image");
                return;
            }

            const formData = new FormData();
            formData.append("formFile", file);
            formData.append("fileName", file.name);

            try {
                const { data: { fileUrl } } = await axios.post("/Recipes/FileUpload", formData);
                console.log(fileUrl);

                this.setState({
                    MainMediaUrl: fileUrl.trim()
                });
            } catch(error) {
                alert("Error uploading image");
            }
        }

        onMainMediaUrlChange = (event) => {
            console.log(event.target.files[0].name)
            this.setState({
                MainSelectedFile: event.target.files[0]
            })
        }

        componentDidMount() {
            this.setState(state =>{
                var state = JSON.parse(JSON.stringify(@Html.Raw(recipe)));
                console.log(state);
                return {
                    ...state,
                }
            })
        }

        submitHandler = (event) => {
            event.preventDefault();

            if(this.state.MainMediaUrl.trim() === "") {
                alert("Main Recipe image is required!");
                return false;
            }

            if(this.state.Title.trim() === "") {
                alert("Recipe title is required!");
                return false;
            }

            const toSubmit = this.generateJson();
            console.log(toSubmit);
            this.postRecipe(toSubmit);
        }

        generateJson = () => {
            var RecipeSteps = this.state.RecipeSteps
                .filter(step => step.TextInstructions.trim() !== "")
                .map((step, index) => {
                    delete step.MediaSelectedFile;
                    return {
                        ...step, 
                        StepNumber: index + 1
                    }
                });
            
            var RecipeIngredients = this.state.RecipeIngredients
                .filter(ingredient => ingredient.Ingredient.trim() !== "");

            var RecipeTags = this.state.RecipeTags
                .filter(allergenTag => allergenTag.Tag.Warning.trim() !== "");

            var RecipeGroups = this.state.RecipeGroups
                .filter(recipeGroup => recipeGroup.Group.GroupName.trim() !== "");

            var state = {...this.state};
            delete state.MainSelectedFile;
            const toSubmit = {
                ...state,
                RecipeSteps,
                RecipeIngredients,
                RecipeTags,
                RecipeGroups
            }
            return toSubmit;
        }

        generateAllergenTags = (event) => {
            event.preventDefault();
            const ingredient = [...this.state.RecipeIngredients];
            console.log(ingredient);
            this.fetchAllergenTags(ingredient, this.setAllergenTags);
        }

        fetchAllergenTags = (ingredient, callback) => {
            let xhr = new XMLHttpRequest();
            xhr.open("POST", "/Recipes/GenerateAllergenTag");
            xhr.setRequestHeader("Content-Type", "application/json; charset=utf8");

            xhr.setRequestHeader("RequestVerificationToken", 
                    document.getElementById('RequestVerificationToken').value);

            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    // Get tags from flask ML
                    if (this.status === 200) {
                        const { tags } = JSON.parse(this.response);
                        console.log(tags);
                        callback(tags);
                    } else {
                        alert("Error generate tags");
                    }
                }
            };

            xhr.send(JSON.stringify(ingredient));
        }

        setAllergenTags = (tags) => {
            this.setState(state => {
                const RecipeTags = [...state.RecipeTags, ...JSON.parse(tags)]
                    .filter(r => {
                        return r.Tag.Warning.trim() !== "" || !r.IsAllergenTag;
                    });

                return {
                    RecipeTags
                }
            })
            console.log(this.state.RecipeTags);
        }

        removeAllergenTag = (index) => {
            this.setState(state => {
                const RecipeTags = state.RecipeTags;
                RecipeTags.splice(index, 1);
                return {
                    RecipeTags
                }
            })
        }

        addAllergenTag = () => {
            this.setState(state => {
                const RecipeTags = [...state.RecipeTags, {
                    IsAllergenTag: true,
                    Tag: {
                        TagName: "",
                        Warning: "",
                    }
                }];
                return {
                    RecipeTags
                }
            })
        }

        handleAllergenTagChange = (event, index) => {
            const newTag = event.target.value;
            this.setState(state => {
                const RecipeTags = state.RecipeTags;
                RecipeTags[index] = {
                    IsAllergenTag: true,
                    Tag: {
                        TagName: newTag,
                        Warning: newTag,
                    }
                };
                return {
                    RecipeTags
                }
            })
        }

        handleTagChange = (event, index) => {
            const newTag = event.target.value;
            this.setState(state => {
                const RecipeTags = state.RecipeTags;
                RecipeTags[index] = {
                    IsAllergenTag: false,
                    Tag: {
                        TagName: newTag,
                        Warning: newTag,
                    }
                }
                return {
                    RecipeTags
                }
            })
        }

        removeTag = (index) => {
            this.setState(state => {
                const RecipeTags = state.RecipeTags;
                RecipeTags.splice(index, 1);
                return {
                    RecipeTags
                }
            })
        }

        addTag = () => {
            this.setState(state => {
                const RecipeTags = [...state.RecipeTags, {
                    IsAllergenTag: false,
                    Tag: {
                        TagName: "",
                        Warning: "",
                    }
                }];
                return {
                    RecipeTags
                }
            })
        }

        postRecipe = (toSubmit) => {
            let xhr = new XMLHttpRequest();
            xhr.open("POST", `/Recipes/Edit/${this.state.RecipeId}`);
            xhr.setRequestHeader("Content-Type", "application/json; charset=utf8");

            xhr.setRequestHeader("RequestVerificationToken",
                    document.getElementById('RequestVerificationToken').value);

            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    // Request for recipe list page if add recipe is successful
                    if (this.status === 200) {
                        var url = window.location.href;
                        var redirectUrl = url.split("/");
                        redirectUrl.splice(-2,2);
                        window.location.assign(redirectUrl.join("/"));
                    } else {
                        alert("Error editing recipe");
                    }
                }
            };

            xhr.send(JSON.stringify(toSubmit));
        }

        handleChange = (event) => {
            const target = event.target;
            const value = target.type === 'checkbox' ? target.checked : target.value;
            const name = target.name;

            this.setState({
                [name]: value
            });
        }

        addIngredient = () => {
            this.setState(state => {
                const RecipeIngredients = [...state.RecipeIngredients, {
                    Ingredient: "",
                    Quantity: 0,
                    UnitOfMeasurement: "",
                }]
                return {
                    RecipeIngredients,
                }
            })
        }

        removeIngredient = (index) => {
            this.setState(state => {
                const RecipeIngredients = state.RecipeIngredients;
                RecipeIngredients.splice(index, 1);
                return {
                    RecipeIngredients,
                }
            })
        }

        handleIngredientChange = (index) => {
            const Ingredient = document.getElementById(`ingredient-name-${index}`).value;
            const Quantity = document.getElementById(`ingredient-qty-${index}`).value;
            const Unit = document.getElementById(`ingredient-unit-${index}`).value;
            this.setState(state => {
                const RecipeIngredients = state.RecipeIngredients;
                RecipeIngredients[index] = {
                    Ingredient,
                    Quantity,
                    Unit
                }
                return {
                    RecipeIngredients
                };
            })
        }

        addGroup = () => {
            this.setState(state => {
                const RecipeGroups = [...state.RecipeGroups, {
                    Group: {
                        GroupName: ""
                    }
                }];
                return {
                    RecipeGroups,
                }
            });
        }

        removeGroup = (index) => {
            this.setState(state => {
                const RecipeGroups = state.RecipeGroups;
                RecipeGroups.splice(index, 1);
                return {
                    RecipeGroups,
                }
            });
        }

        handleGroupChange = (event, index) => {
            const GroupName = event.target.value;
            this.setState(state => {
                const RecipeGroups = state.RecipeGroups;
                const oldGroup = RecipeGroups[index]
                oldGroup.Group.GroupName = GroupName
                RecipeGroups[index] = oldGroup;
                return {
                    RecipeGroups
                };
            })
        }

        addStep = () => {
            this.setState(state => {
                const RecipeSteps = [...state.RecipeSteps, {
                    TextInstructions: "",
                    MediaFileUrl: "",
                    MediaSelectedFile: null,
                }];
                return {
                    RecipeSteps,
                }
            });
        }

        removeStep = (index) => {
            this.setState(state => {
                const RecipeSteps = state.RecipeSteps;
                RecipeSteps.splice(index, 1);
                return {
                    RecipeSteps,
                }
            });
        }

        handleStepChange = (event, index) => {
            const TextInstructions = event.target.value;
            this.setState(state => {
                const RecipeSteps = state.RecipeSteps;
                const oldStep = RecipeSteps[index]
                RecipeSteps[index] = {
                    ...oldStep,
                    TextInstructions
                }
                return {
                    RecipeSteps
                };
            })
        }
    }

    ReactDOM.render(<Edit />, document.querySelector("#edit"));
</script>