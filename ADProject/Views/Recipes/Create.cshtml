@model ADProject.Models.Recipe

@{
    ViewData["Title"] = "Create";
    int userId = (int)ViewData["UserId"];
}

<h1>Create</h1>

<h4>Recipe</h4>
<hr />
<div class="row">
    <div id="create"></div>
    @*<div class="col-md-4">
            <form asp-action="Create">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="UserId" class="control-label"></label>
                    <select asp-for="UserId" class="form-control" asp-items="ViewBag.UserId"></select>
                </div>
                <div class="form-group">
                    <label asp-for="DateCreated" class="control-label"></label>
                    <input asp-for="DateCreated" class="form-control" />
                    <span asp-validation-for="DateCreated" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="DurationInMins" class="control-label"></label>
                    <input asp-for="DurationInMins" class="form-control" />
                    <span asp-validation-for="DurationInMins" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="MainMediaUrl" class="control-label"></label>
                    <input asp-for="MainMediaUrl" class="form-control" />
                    <span asp-validation-for="MainMediaUrl" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>*@
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<form method="post" enctype="multipart/form-data" asp-controller="Recipes" asp-action="FileUpload">
    <span>Select File:</span>
    <input type="file" name="postedFiles" multiple />
    <input type="submit" value="Upload" />
    <br />
    <span style="color:green">@Html.Raw(ViewBag.Message)</span>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<input type="hidden" id="RequestVerificationToken" 
       name="RequestVerificationToken" value="@GetAntiXsrfRequestToken()">

<!-- React JS -->
<script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

<script type="text/babel">
    class Create extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                Title: "",
                Description: "",
                UserId: "@Html.Raw(userId)",
                DurationInMins: 0,
                Calories: 0,
                ServingSize: 1,
                IsPublished: true,
               @* MainMediaUrl: "",
    *@
                RecipeIngredients: [{
                    Ingredient: "large eggs, room temperature",
                    Quantity: 4,
                    UnitOfMeasurement: "egg",
                },
                {
                    Ingredient: "cups sugar",
                    Quantity: 2,
                    UnitOfMeasurement: "cups",
                },
                {
                    Ingredient: "vanilia extract",
                    Quantity: 1,
                    UnitOfMeasurement: "teaspoon",
                },
                {
                    Ingredient: "all-purpose flour",
                    Quantity: 2.25,
                    UnitOfMeasurement: "cups",
                },
                {
                    Ingredient: "baking powder",
                    Quantity: 2.25,
                    UnitOfMeasurement: "cups",
                },
                {
                    Ingredient: "2% milk",
                    Quantity: 1.25,
                    UnitOfMeasurement: "cups",
                },
                {
                    Ingredient: "butter, cubed",
                    Quantity: 10,
                    UnitOfMeasurement: "tablespons",
                },],
                RecipeSteps: [{
                    TextInstructions: "",
                    MediaFileUrl: "",
                }],
                RecipeTags: [{
                    TagName: "",
                    Warning: "",
                }],
            };
        }

        generateAllergenTags = (event) => {
            event.preventDefault();
            const ingredient = [...this.state.RecipeIngredients];
            console.log(ingredient);
            this.fetchTags(ingredient, this.setTags);
        }

        submitHandler = (event) => {
            event.preventDefault();
            const toSubmit = this.generateJson();
            console.log(toSubmit);
            this.postRecipe(toSubmit);
        }

        generateJson = () => {
            var RecipeSteps = this.state.RecipeSteps.map((step, index) => ({...step, StepNumber: index + 1}))
            var state = {...this.state};
            delete state.numIngredients;
            delete state.numSteps;
            const toSubmit = {
                ...state,
                RecipeSteps
            }
            return toSubmit;
        }

        postRecipe = (toSubmit) => {
            let xhr = new XMLHttpRequest();
            xhr.open("POST", "/Recipes/Create");
            xhr.setRequestHeader("Content-Type", "application/json; charset=utf8");

            xhr.setRequestHeader("RequestVerificationToken",
                    document.getElementById('RequestVerificationToken').value);

            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    // Request for recipe list page if add recipe is successful
                    if (this.status === 200) {
                        var url = window.location.href;
                        var redirectUrl = url.split("/");
                        redirectUrl.pop();
                        window.location.assign(redirectUrl.join("/"));
                    } else {
                        alert("Error adding recipe");
                    }
                }
            };

            xhr.send(JSON.stringify(toSubmit));
        }

        fetchTags = (ingredient, callback) => {
            let xhr = new XMLHttpRequest();
            xhr.open("POST", "/Recipes/GenerateAllergenTag");
            xhr.setRequestHeader("Content-Type", "application/json; charset=utf8");

            xhr.setRequestHeader("RequestVerificationToken",
                    document.getElementById('RequestVerificationToken').value);

            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    // Get tags from flask ML
                    if (this.status === 200) {
                        const { tags } = JSON.parse(this.response);
                        console.log(tags);
                        callback(tags);
                    } else {
                        alert("Error generate tags");
                    }
                }
            };

            xhr.send(JSON.stringify(ingredient));
        }

        setTags = (tags) => {
            this.setState(state => {
                return {
                    RecipeTags: [...JSON.parse(tags)]
                }
            })
            console.log(this.state.RecipeTags);
        }

        removeTag = (index) => {
            this.setState(state => {
                const RecipeTags = state.RecipeTags;
                RecipeTags.splice(index, 1);
                return {
                    RecipeTags
                }
            })
        }

        addTag = () => {
            this.setState(state => {
                const RecipeTags = [...state.RecipeTags, {
                    TagName: "",
                    Warning: "",
                }];
                return {
                    RecipeTags
                }
            })
        }

        handleTagChange = (event, index) => {
            const newTag = event.target.value;
            this.setState(state => {
                const RecipeTags = state.RecipeTags;
                RecipeTags[index] = {
                    TagName: newTag,
                    Warning: newTag,
                };
                return {
                    RecipeTags
                }
            })
        }

        handleChange = (event) => {
            const { name, value } = event.target;
            this.setState({
                [name]: value
            });
        }

        addIngredient = () => {
            this.setState(state => {
                const RecipeIngredients = [...state.RecipeIngredients, {
                    Ingredient: "",
                    Quantity: 0,
                    UnitOfMeasurement: "",
                }];
                return {
                    RecipeIngredients,
                }
            })
        }

        removeIngredient = (index) => {
            this.setState(state => {
                const RecipeIngredients = state.RecipeIngredients;
                RecipeIngredients.splice(index, 1);
                return {
                    RecipeIngredients,
                }
            })
        }

        handleIngredientChange = (index) => {
            const Ingredient = document.getElementById(`ingredient-name-${index}`).value;
            const Quantity = document.getElementById(`ingredient-qty-${index}`).value;
            const Unit = document.getElementById(`ingredient-unit-${index}`).value;
            this.setState(state => {
                const RecipeIngredients = state.RecipeIngredients;
                RecipeIngredients[index] = {
                    Ingredient,
                    Quantity,
                    Unit
                }
                return {
                    RecipeIngredients
                };
            })
        }

        addStep = () => {
            this.setState(state => {
                const RecipeSteps = [...state.RecipeSteps, {
                    TextInstructions: "",
                    MediaFileUrl: "",
                }];
                return {
                    RecipeSteps,
                }
            });
        }

        removeStep = (index) => {
            this.setState(state => {
                const RecipeSteps = state.RecipeSteps;
                RecipeSteps.splice(index, 1);
                return {
                    RecipeSteps,
                }
            });
        }

        handleStepChange = (index) => {
            const TextInstructions = document.getElementById(`step-instruction-${index}`).value;
            const MediaFileUrl = document.getElementById(`step-mediafileurl-${index}`).value;
            this.setState(state => {
                const RecipeSteps = state.RecipeSteps;
                RecipeSteps[index] = {
                    TextInstructions,
                    MediaFileUrl
                }
                return {
                    RecipeSteps
                };
            })
        }

        render() {
            return (
                <div>
                    <form onSubmit={this.submitHandler}>
                            <div className="form-group">
                                <label className="control-label">Title</label>
                                <input type="text" className="form-control" name="Title" value={this.state.Title} onChange={this.handleChange} />
                            </div>
                            <div className="form-group">
                                <label className="control-label">Description</label>
                                <input type="text"className="form-control" name="Description" value={this.state.Description} onChange={this.handleChange} />
                            </div>
                            <div className="form-group">
                                <label className="control-label">DurationInMins</label>
                                <input type="number" className="form-control" name="DurationInMins" value={this.state.DurationInMins} onChange={this.handleChange} />
                            </div>
                            <div className="form-group">
                                <label className="control-label">Calories</label>
                                <input type="number" className="form-control" name="Calories" value={this.state.Calories} onChange={this.handleChange} />
                            </div>
                            <div className="form-group">
                                <label className="control-label">ServingSize</label>
                                <input type="number" className="form-control" name="ServingSize" value={this.state.ServingSize} onChange={this.handleChange} />
                            </div>
                            <div className="form-group">
                                <label className="control-label">MainMediaUrl</label>
                                <input type="text" className="form-control" name="MainMediaUrl" value={this.state.MainMediaUrl} onChange={this.handleChange} />
                            </div>

                            {this.state.RecipeSteps.map((element, index) => {
                                return(
                                    <div key={index}>
                                        <div>Step {index + 1}</div>
                                        <div className="form-group">
                                            <label className="control-label">TextInstructions</label>
                                            <input type="text" id={`step-instruction-${index}`} className="form-control" name="step-instruction" onChange={() => this.handleStepChange(index)}  value={element.TextInstructions} />
                                        </div>
                                        <div className="form-group">
                                            <label className="control-label">MediaFileUrl</label>
                                            <input type="text" id={`step-mediafileurl-${index}`} className="form-control" name="step-mediafileurl" onChange={() => this.handleStepChange(index)} value={element.MediaFileUrl} />
                                        </div>
                                        <button type="button" className="btn btn-danger" onClick={() => this.removeStep(index)}>Remove Step</button>
                                    </div>
                                )
                            })}
                            <button className="btn btn-secondary" type="button" onClick={this.addStep}>Add Steps</button>

                            {this.state.RecipeIngredients.map((element, index) => {
                                return(
                                    <div key={index}>
                                        <div>Ingredient {index + 1}</div>
                                        <div className="form-group">
                                            <label className="control-label">Ingredient</label>
                                            <input type="text" id={`ingredient-name-${index}`} name="ingredient-name" onChange={() => this.handleIngredientChange(index)} value={element.Ingredient} />
                                        </div>
                                        <div className="form-group">
                                            <label className="control-label">Quantity</label>
                                            <input type="number" id={`ingredient-qty-${index}`} name="ingredient-qty" onChange={() => this.handleIngredientChange(index)} value={element.Quantity} />
                                        </div>
                                        <div className="form-group">
                                            <label className="control-label">UnitOfMeasurement</label>
                                            <input type="text" id={`ingredient-unit-${index}`} name="ingredient-unit" onChange={() => this.handleIngredientChange(index)} value={element.UnitOfMeasurement} />
                                        </div>
                                        <button type="button" className="btn btn-danger" onClick={() => this.removeIngredient(index)}>Remove Ingredient</button>
                                    </div>
                                )
                            })}
                            <button className="btn btn-secondary" type="button" onClick={this.addIngredient}>Add Ingredient</button>

                            <button className="btn btn-primary" type="button" onClick={this.generateAllergenTags}>Generate Allergen Tag</button>
                            {this.state.RecipeTags.map((tag, index) => (
                                <div key={index}>
                                    <input type="text" onChange={() => this.handleTagChange(event, index)} value={tag.Warning} />
                                    <button type="button" className="btn btn-danger" onClick={() => this.removeTag(index)}>X</button>
                                </div>
                            ))}
                            <button type="button" className="btn btn-primary" onClick={this.addTag}>Add Tags</button>

                            <div className="form-group">
                                <input type="submit" value="Create" className="btn btn-primary" />
                            </div>
                      </form>
                </div>
            )
        }
    }

    ReactDOM.render(<Create />, document.querySelector("#create"));
</script>