// <auto-generated />
using System;
using ADProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ADProject.Migrations
{
    [DbContext(typeof(ADProjContext))]
    partial class ADProjContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ADProject.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ADProject.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("firstName");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("lastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ADProject.Models.Comment", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentsId")
                        .UseIdentityColumn();

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Dateposted")
                        .HasColumnType("datetime")
                        .HasColumnName("dateposted");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("recipeId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentsId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ADProject.Models.FollowUser", b =>
                {
                    b.Property<int>("FollowUsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FollowedUserId")
                        .HasColumnType("int")
                        .HasColumnName("followedUserId");

                    b.Property<int>("FollowingUserId")
                        .HasColumnType("int")
                        .HasColumnName("followingUserId");

                    b.HasKey("FollowUsersId");

                    b.HasIndex("FollowedUserId");

                    b.HasIndex("FollowingUserId");

                    b.ToTable("FollowUsers");
                });

            modelBuilder.Entity("ADProject.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("('This group has no description')");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("groupName");

                    b.Property<string>("GroupPhoto")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("groupPhoto");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit")
                        .HasColumnName("isPublished");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("ADProject.Models.GroupTag", b =>
                {
                    b.Property<int>("GroupTagsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("GroupTagsId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TagId");

                    b.ToTable("GroupTags");
                });

            modelBuilder.Entity("ADProject.Models.LikesDislike", b =>
                {
                    b.Property<int>("LikesDislikesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit")
                        .HasColumnName("isLiked");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikesDislikesId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("LikesDislikes");
                });

            modelBuilder.Entity("ADProject.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Calories")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("calories")
                        .HasDefaultValueSql("((10))");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("('This recipe has no description')");

                    b.Property<int>("DurationInMins")
                        .HasColumnType("int")
                        .HasColumnName("durationInMins");

                    b.Property<bool?>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isPublished")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MainMediaUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mainMediaUrl");

                    b.Property<int?>("ServingSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("servingSize")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("ADProject.Models.RecipeGroup", b =>
                {
                    b.Property<int>("RecipeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("RecipeGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeGroup");
                });

            modelBuilder.Entity("ADProject.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeIngredientsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ingredient")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ingredient");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("quantity");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasurement")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unitOfMeasurement");

                    b.HasKey("RecipeIngredientsId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("ADProject.Models.RecipeStep", b =>
                {
                    b.Property<int>("RecipeStepsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("MediaFileUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mediaFileURL");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int")
                        .HasColumnName("stepNumber");

                    b.Property<string>("TextInstructions")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("textInstructions");

                    b.HasKey("RecipeStepsId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeSteps");
                });

            modelBuilder.Entity("ADProject.Models.RecipeTag", b =>
                {
                    b.Property<int>("RecipeTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeTagID")
                        .UseIdentityColumn();

                    b.Property<bool>("IsAllergenTag")
                        .HasColumnType("bit")
                        .HasColumnName("isAllergenTag");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("RecipeTagId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipeTags");
                });

            modelBuilder.Entity("ADProject.Models.SavedRecipe", b =>
                {
                    b.Property<int>("SavedRecipesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SavedRecipesId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedRecipes");
                });

            modelBuilder.Entity("ADProject.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("tagName");

                    b.Property<string>("Warning")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("warning");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ADProject.Models.UserAllergen", b =>
                {
                    b.Property<int>("UserAllergenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAllergenId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAllergen");
                });

            modelBuilder.Entity("ADProject.Models.UsersGroup", b =>
                {
                    b.Property<int>("UsersGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMod")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UsersGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ADProject.Models.Comment", b =>
                {
                    b.HasOne("ADProject.Models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADProject.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Comments_UserId")
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADProject.Models.FollowUser", b =>
                {
                    b.HasOne("ADProject.Models.ApplicationUser", "FollowedUser")
                        .WithMany("FollowUserFollowedUsers")
                        .HasForeignKey("FollowedUserId")
                        .HasConstraintName("FK_FollowUsers_followedUserId")
                        .IsRequired();

                    b.HasOne("ADProject.Models.ApplicationUser", "FollowingUser")
                        .WithMany("FollowUserFollowingUsers")
                        .HasForeignKey("FollowingUserId")
                        .HasConstraintName("FK_FollowUsers_followingUserId")
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("ADProject.Models.GroupTag", b =>
                {
                    b.HasOne("ADProject.Models.Group", "Group")
                        .WithMany("GroupTags")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupTags_GroupId")
                        .IsRequired();

                    b.HasOne("ADProject.Models.Tag", "Tag")
                        .WithMany("GroupTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_GroupTags_TagId")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ADProject.Models.LikesDislike", b =>
                {
                    b.HasOne("ADProject.Models.Recipe", "Recipe")
                        .WithMany("LikesDislikes")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK_LikesDislikes_RecipeId")
                        .IsRequired();

                    b.HasOne("ADProject.Models.ApplicationUser", "User")
                        .WithMany("LikesDislikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LikesDislikes_UserId")
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADProject.Models.Recipe", b =>
                {
                    b.HasOne("ADProject.Models.ApplicationUser", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Recipe_UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADProject.Models.RecipeGroup", b =>
                {
                    b.HasOne("ADProject.Models.Group", "Group")
                        .WithMany("RecipeGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_RecipeGroup_GroupId")
                        .IsRequired();

                    b.HasOne("ADProject.Models.Recipe", "Recipe")
                        .WithMany("RecipeGroups")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK_RecipeGroup_RecipeId")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ADProject.Models.RecipeIngredient", b =>
                {
                    b.HasOne("ADProject.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ADProject.Models.RecipeStep", b =>
                {
                    b.HasOne("ADProject.Models.Recipe", "Recipe")
                        .WithMany("RecipeSteps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ADProject.Models.RecipeTag", b =>
                {
                    b.HasOne("ADProject.Models.Recipe", "Recipe")
                        .WithMany("RecipeTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADProject.Models.Tag", "Tag")
                        .WithMany("RecipeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ADProject.Models.SavedRecipe", b =>
                {
                    b.HasOne("ADProject.Models.Recipe", "Recipe")
                        .WithMany("SavedRecipes")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK_SavedRecipes_RecipeId")
                        .IsRequired();

                    b.HasOne("ADProject.Models.ApplicationUser", "User")
                        .WithMany("SavedRecipes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SavedRecipes_UserId")
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADProject.Models.UserAllergen", b =>
                {
                    b.HasOne("ADProject.Models.Tag", "Tag")
                        .WithMany("UserAllergens")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_UserAllergen_TagId")
                        .IsRequired();

                    b.HasOne("ADProject.Models.ApplicationUser", "User")
                        .WithMany("UserAllergens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserAllergen_UserId")
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADProject.Models.UsersGroup", b =>
                {
                    b.HasOne("ADProject.Models.Group", "Group")
                        .WithMany("UsersGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_UsersGroup_GroupId")
                        .IsRequired();

                    b.HasOne("ADProject.Models.ApplicationUser", "User")
                        .WithMany("UsersGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersGroup_UserId")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ADProject.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ADProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ADProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ADProject.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ADProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADProject.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FollowUserFollowedUsers");

                    b.Navigation("FollowUserFollowingUsers");

                    b.Navigation("LikesDislikes");

                    b.Navigation("Recipes");

                    b.Navigation("SavedRecipes");

                    b.Navigation("UserAllergens");

                    b.Navigation("UsersGroups");
                });

            modelBuilder.Entity("ADProject.Models.Group", b =>
                {
                    b.Navigation("GroupTags");

                    b.Navigation("RecipeGroups");

                    b.Navigation("UsersGroups");
                });

            modelBuilder.Entity("ADProject.Models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikesDislikes");

                    b.Navigation("RecipeGroups");

                    b.Navigation("RecipeIngredients");

                    b.Navigation("RecipeSteps");

                    b.Navigation("RecipeTags");

                    b.Navigation("SavedRecipes");
                });

            modelBuilder.Entity("ADProject.Models.Tag", b =>
                {
                    b.Navigation("GroupTags");

                    b.Navigation("RecipeTags");

                    b.Navigation("UserAllergens");
                });
#pragma warning restore 612, 618
        }
    }
}
